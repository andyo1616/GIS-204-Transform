# -*- coding: utf-8 -*-
"""FEMA_GIS_EXPORT_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FKR9PvlhCnEBooG_zrECY9qy79Il8sFC
"""

import streamlit as st
import pandas as pd
from google.colab import files
from datetime import datetime

st.title("Excel File Transformer")

# File uploader for users to upload .xlsx files
uploaded_file = st.file_uploader("Choose an Excel file", type="xlsx")
if uploaded_file:
    # Read and transform the uploaded file
    df = pd.read_excel("ICS_215_EXPORT.xlsx")

new_rows = []
divisions = ['10 - Carter', '13 - Claiborne', '15 - Cocke', '29 - Grainger', '30 - Greene',
             '32 - Hamblen', '37 - Hawkins', '45 - Jefferson', '46 - Johnson', '78 - Sevier',
             '82 - Sullivan', '86 - Unicoi', '90 - Washington']

rows_to_delete = []

for index, row in df.iterrows():
  if row['Division'] == 'Throughout Designated Counties':
    for division in divisions:
      new_row = row.copy()
      new_row['Division'] = division
      new_rows.append(new_row)
    rows_to_delete.append(index)


df1 = df.drop(rows_to_delete)
df1 = pd.concat([df1, pd.DataFrame(new_rows)])

# if Division = "Not Set", add "NA - " to the data

df1.loc[df1['Division'] == 'Not Set', 'Division'] = 'NA - ' + df1.loc[df1['Division'] == 'Not Set', 'Division']

# if Division = "Branch Office", add "NA - " to the data

df1.loc[df1['Division'] == 'Branch Office', 'Division'] = 'NA - ' + df1.loc[df1['Division'] == 'Branch Office', 'Division']

# create new column called "temp" from data in Division

df1['temp'] = df1['Division']

# remove the first 5 characters in the "temp" column

df1['temp'] = df1['temp'].str[5:]

# keep only the first two characters in Division Column

df1['Division'] = df1['Division'].str[:2]

# Replace values in "County" with values from "temp"
df1["County"] = df1["temp"]

# Delete the "temp" column
df1 = df1.drop("temp", axis=1)

# Create Branch Column
df1['Branch'] = ''

for index, row in df1.iterrows():
  if row['Division'] in ['47', '78', '45', '15', '30', '32', '37', '29', '34', '13']:
    df1.loc[index, 'Branch'] = 'I'
  elif row['Division'] in ['86', '90', '10', '46', '82']:
    df1.loc[index, 'Branch'] = 'II'

# Get the current date in DDMMMYY format
current_date = datetime.now().strftime("%d%b%y")

# Export df1 as Excel file with date in filename
excel_filename = f"GIS_204_Export_{current_date}.xlsx"
df1.to_excel(excel_filename, index=False)

# Download the Excel file
files.download(excel_filename)